import{_ as a,o as e,c as s,U as o}from"./chunks/framework.2333ef68.js";const u=JSON.parse('{"title":"DOM","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/11-DOM.md","filePath":"JavaScript/11-DOM.md"}'),l={name:"JavaScript/11-DOM.md"},t=o(`<h1 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h1><p>文档对象模型（Document Object Model，简称DOM )</p><h2 id="dom可以做什么" tabindex="-1">DOM可以做什么 <a class="header-anchor" href="#dom可以做什么" aria-label="Permalink to &quot;DOM可以做什么&quot;">​</a></h2><ul><li>找对象（元素节点）</li><li>设置元素的属性值</li><li>设置元素的样式</li><li>动态创建和删除元素</li><li>事件的触发响应：事件源、事件、事件的驱动程序</li></ul><h1 id="获取页面元素" tabindex="-1">获取页面元素 <a class="header-anchor" href="#获取页面元素" aria-label="Permalink to &quot;获取页面元素&quot;">​</a></h1><p>1.使用 <code>getElementByld()</code> 方法可以获取带有 ID 的元素对象，并返回一个 <code>Element</code> 对象。</p><ul><li><code>console.dir()</code> 可打印元素的属性和方法</li><li><br></li></ul><p>2.<code>getElementsByTagName()</code> 方法可以返回带有指定标签名的对象的集合。<br>返回的是 <strong>元素对象的集合，伪数组形式表示</strong>。</p><p>3.根据类名返回元素对象集合。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementsByClassName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">类名</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>4.根据指定选择器返回第一个元素对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">选择器</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>5.返回指定选择器的所有元素集合。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">选择器</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="获取特殊元素" tabindex="-1">获取特殊元素 <a class="header-anchor" href="#获取特殊元素" aria-label="Permalink to &quot;获取特殊元素&quot;">​</a></h3><ol><li>获取 <code>body</code> 元素</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="2"><li>获取 <code>html</code> 元素</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><ol><li>获取事件源</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">唐伯虎</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="2"><li>注册事件</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="3"><li>添加事件处理程序</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">点秋香</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="改变元素内容" tabindex="-1">改变元素内容 <a class="header-anchor" href="#改变元素内容" aria-label="Permalink to &quot;改变元素内容&quot;">​</a></h2><ol><li><code>innerText</code> 不识别 html 标签，<code>innerHTML</code> 识别 html 标签。</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> &lt;strong&gt;今天是：&lt;/strong&gt;2021-3-23</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="2"><li><code>innerText</code> 会取出空格和换行，<code>innerHTML</code> 保留换行和空格。</li></ol><h3 id="样式属性操作" tabindex="-1">样式属性操作 <a class="header-anchor" href="#样式属性操作" aria-label="Permalink to &quot;样式属性操作&quot;">​</a></h3><p>我们可以通过JS修改元素的大小、颜色、位置等样式。</p><ol><li><code>element.style</code>：行内样式操作</li><li><code>element.className</code>：类名样式操作</li></ol><h2 id="排他思想" tabindex="-1">排他思想 <a class="header-anchor" href="#排他思想" aria-label="Permalink to &quot;排他思想&quot;">​</a></h2><p>如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式（留下我自己）</li></ol><h2 id="获取元素的属性值" tabindex="-1">获取元素的属性值 <a class="header-anchor" href="#获取元素的属性值" aria-label="Permalink to &quot;获取元素的属性值&quot;">​</a></h2><p>(1) element.属性<br>(2) element.getAttribute(&#39;属性&#39;)  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index</p><h2 id="设置元素属性值" tabindex="-1">设置元素属性值 <a class="header-anchor" href="#设置元素属性值" aria-label="Permalink to &quot;设置元素属性值&quot;">​</a></h2><p>(1) element.属性= &#39;值&#39;<br>(2) element.setAttribute(&#39;属性&#39;, &#39;值&#39;);  主要针对于自定义属性</p><h4 id="移除属性" tabindex="-1">移除属性 <a class="header-anchor" href="#移除属性" aria-label="Permalink to &quot;移除属性&quot;">​</a></h4><p><code>element.removeAttribute(属性);</code></p><h1 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-label="Permalink to &quot;节点&quot;">​</a></h1><p><strong>节点</strong>（Node）：构成 HTML 网页的最基本单元。网页中的每一个部分都可以称为是一个节点，比如：html标签、属性、文本、注释、整个文档等都是一个节点。</p><p>虽然都是节点，但是实际上他们的具体类型是不同的。常见节点分为四类：</p><ul><li>文档节点（文档）：整个 HTML 文档。整个 HTML 文档就是一个文档节点。</li><li>元素节点（标签）：HTML标签。</li><li>属性节点（属性）：元素的属性。</li><li>文本节点（文本）：HTML标签中的文本内容（包括标签之间的空格、换行）。</li></ul><p>节点的类型不同，属性和方法也都不尽相同。所有的节点都是Object。</p><p>DOM就是由节点组成的。<br><strong>解析过程</strong>： HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树，getElementById是获取内中DOM上的元素节点。然后操作的时候修改的是该元素的<strong>属性</strong>。<br><strong>DOM树</strong>：（一切都是节点）<br>DOM的数据结构如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34220974/1673533781933-69b126a6-548f-4f22-9c96-a4f0edbe3cbb.png#averageHue=%23f5f4f4&amp;clientId=u5df62497-5f35-4&amp;from=paste&amp;id=u0eda1cdd&amp;originHeight=265&amp;originWidth=483&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22651&amp;status=done&amp;style=none&amp;taskId=u989a3391-8fb9-447f-b857-cb8a6c673f9&amp;title=" alt="image.png"></p><h2 id="节点层级" tabindex="-1">节点层级 <a class="header-anchor" href="#节点层级" aria-label="Permalink to &quot;节点层级&quot;">​</a></h2><h4 id="父级节点" tabindex="-1">父级节点 <a class="header-anchor" href="#父级节点" aria-label="Permalink to &quot;父级节点&quot;">​</a></h4><p>获取离元素最近的父节点，若找不到则返回 <code>null</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode</span></span></code></pre></div><h4 id="子节点" tabindex="-1">子节点 <a class="header-anchor" href="#子节点" aria-label="Permalink to &quot;子节点&quot;">​</a></h4><p><strong>更加好的方法：获取子元素节点</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>方法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes</span></span></code></pre></div><p>返回包含了所有的子节点，包括元素节点，文本节点等。</p><p>子节点方法：</p><p>① 获取 <strong>所有结点</strong> 中的第一个和最后一个：</p><ul><li><code>parentNode.firstChild</code></li><li><code>parentNode.lastChild</code></li></ul><p>② 获取 <strong>元素节点</strong>中第一个和最后一个</p><ul><li><code>parentNode.firstElementChild</code></li><li><code>parentNode.lastElementChild</code></li></ul><p>③ <strong>实际开发</strong>：</p><ul><li><code>parentNode.children[0]</code></li><li><code>parentNode.children[parentNode.children.length -1]</code></li></ul><h4 id="兄弟节点" tabindex="-1">兄弟节点 <a class="header-anchor" href="#兄弟节点" aria-label="Permalink to &quot;兄弟节点&quot;">​</a></h4><ol><li>返回下一个兄弟节点：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSibling</span></span></code></pre></div><ol start="2"><li>返回上一个的兄弟节点：</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node.previousSibling</span></span></code></pre></div><ol start="3"><li>返回下一个 <strong>兄弟元素节点</strong>（≥IE9）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextElementSibling</span></span></code></pre></div><ol start="4"><li>返回上一个 <strong>兄弟元素节点</strong>（≥IE9）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">previousElementSibling</span></span></code></pre></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><h2 id="创建并添加节点" tabindex="-1">创建并添加节点 <a class="header-anchor" href="#创建并添加节点" aria-label="Permalink to &quot;创建并添加节点&quot;">​</a></h2><p>元素节点</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document.createElement(&quot;tagName&quot;);</span></span></code></pre></div><p>给元素节点添加子元素节点</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">parentNode.appendChild(chileNode)</span></span></code></pre></div><p>在指定元素的前面插入节点</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">\`insertBefore()\`</span></span></code></pre></div><h4 id="删除节点" tabindex="-1">删除节点 <a class="header-anchor" href="#删除节点" aria-label="Permalink to &quot;删除节点&quot;">​</a></h4><p><code>removeChild(childNode)</code> 方法</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 方式一</span></span>
<span class="line"><span style="color:#A6ACCD;">parentNode.removeChild(childNode);</span></span>
<span class="line"><span style="color:#A6ACCD;">// 方式二</span></span>
<span class="line"><span style="color:#A6ACCD;">let oldChild = parentNode.removeChild(childNode);</span></span></code></pre></div><h4 id="复制节点" tabindex="-1">复制节点 <a class="header-anchor" href="#复制节点" aria-label="Permalink to &quot;复制节点&quot;">​</a></h4><p><code>node.cloneNode()</code> 方法返回调用该方法的节点的一个副本。也称为克隆节点/拷贝节点。其中 <code>node</code> 为被克隆的元素节点。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cloneNode</span><span style="color:#A6ACCD;">([deep])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>或者</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newClone </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cloneNode</span><span style="color:#A6ACCD;">([deep])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>对于 <code>deep</code> 参数，可以为 <code>true</code> 或 <code>false</code>，或为空的：</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>创建元素</p><ul><li><code>document.write()</code></li><li><code>element.innerHTML</code></li><li><code>element.createElement()</code></li></ul><p>区别：</p><ol><li><code>document.write()</code> 创建元素，是直接将内容写入页面的内容流，但是 <strong>当文档流执行完毕，会导致页面全部重绘</strong>。即覆盖原本的页面。</li><li><code>innerHTML</code> 是将内容写入某个 DOM 节点，不会导致页面全部重绘。</li><li><code>innerHTML</code> 创建多个元素效率更高（<strong>不要拼接字符串，采取数组形式拼接</strong>），结构稍微复杂。</li><li><code>createElement()</code> 创建多个元素效率稍低一点点，但是结构更清晰。</li></ol><p>增</p><ul><li><code>appendChild</code></li><li><code>insertBefore</code></li></ul><p>删</p><ul><li><code>removeChild</code></li></ul><p>改</p><p>主要修改 dom 的元素属性，dom 元素的内容、属性，表单的值等。</p><ul><li>修改元素属性：<code>src</code>、<code>href</code>、<code>title</code> 等</li><li>修改普通元素内容：<code>innerHTML</code>、<code>innerText</code></li><li>修改表单元素：<code>value</code>、<code>type</code>、<code>disabled</code> 等</li><li>修改元素样式：<code>style</code>、<code>className</code></li></ul><p>查</p><p>主要获取查询dom的元素</p><ul><li>DOM提供的API 方法：<code>getElementById</code>、<code>getElementsByTagName</code>（<strong>古老用法不太推荐</strong>）</li><li>H5提供的新方法：<code>querySelector</code>、<code>querySelectorAll</code> 提倡</li><li>利用节点操作获取元素：父（<code>parentNode</code>)、子（<code>children</code>）、兄（<code>previousElementSibling</code>、<br><code>nextElementSibling</code>）提倡</li></ul><p>属性操作</p><p>主要针对于自定义属性</p><ul><li><code>setAttribute</code>：设置dom的属性值</li><li><code>getAttribute</code>：得到dom的属性值</li><li><code>removeAttribute</code>：移除属性</li></ul><p>事件操作</p><p>给元素注册事件，格式：<code>事件源.事件类型 = 事件处理程序</code></p><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td><code>onclick</code></td><td>鼠标点击左键触发</td></tr><tr><td><code>onmouseover</code></td><td>鼠标经过触发</td></tr><tr><td><code>onmouseout</code></td><td>鼠标离开触发</td></tr><tr><td><code>onfocus</code></td><td>获得鼠标焦点触发</td></tr><tr><td><code>onblur</code></td><td>失去鼠标焦点触发</td></tr><tr><td><code>onmousemove</code></td><td>鼠标移动触发</td></tr><tr><td><code>onmouseup</code></td><td>鼠标弹起触发</td></tr><tr><td><code>onmousedown</code></td><td>鼠标按下触发</td></tr></tbody></table><h2 id="事件-1" tabindex="-1">事件 <a class="header-anchor" href="#事件-1" aria-label="Permalink to &quot;事件&quot;">​</a></h2><p>注册事件有两种方式：<strong>传统方式</strong> 和 <strong>事件监听注册方式</strong>。</p><h4 id="传统注册方式" tabindex="-1">传统注册方式 <a class="header-anchor" href="#传统注册方式" aria-label="Permalink to &quot;传统注册方式&quot;">​</a></h4><ul><li>利用on 开头的事件onclick</li><li><code>&lt;button onclick=&quot;alert(&#39;hi~&#39;)&quot;&gt;&lt;/button&gt;</code></li><li><code>btn.onclick = function() {};</code></li><li>特点：注册事件的 <strong>唯一性</strong></li><li>同一个元素同一个事件只能设置一个处理函数，最<br>后注册的处理函数将会 <strong>覆盖</strong> 前面注册的处理函数。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">btns[0].onclick = function() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            alert(&#39;hi&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span></code></pre></div><h3 id="事件监听注册方式" tabindex="-1">事件监听注册方式 <a class="header-anchor" href="#事件监听注册方式" aria-label="Permalink to &quot;事件监听注册方式&quot;">​</a></h3><ul><li><code>addEventListener()</code></li><li>特点：<strong>同一个元素同一个事件可以注册多个监听器</strong></li><li>里面的事件类型是字符串 必定加引号 而且不带on</li><li>按注册顺序依次执行</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">btns[1].addEventListener(&#39;click&#39;, function() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            alert(22);</span></span>
<span class="line"><span style="color:#A6ACCD;">        })</span></span></code></pre></div><h2 id="删除事件-解绑事件" tabindex="-1">删除事件（解绑事件） <a class="header-anchor" href="#删除事件-解绑事件" aria-label="Permalink to &quot;删除事件（解绑事件）&quot;">​</a></h2><h3 id="传统注册方式-1" tabindex="-1">传统注册方式 <a class="header-anchor" href="#传统注册方式-1" aria-label="Permalink to &quot;传统注册方式&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onclick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span></code></pre></div><h3 id="方法监听注册方式" tabindex="-1">方法监听注册方式 <a class="header-anchor" href="#方法监听注册方式" aria-label="Permalink to &quot;方法监听注册方式&quot;">​</a></h3><h4 id="removeeventlistener" tabindex="-1">removeEventListener <a class="header-anchor" href="#removeeventlistener" aria-label="Permalink to &quot;removeEventListener&quot;">​</a></h4><h1 id="dom-事件流" tabindex="-1">DOM 事件流 <a class="header-anchor" href="#dom-事件流" aria-label="Permalink to &quot;DOM 事件流&quot;">​</a></h1><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p><strong>事件流</strong> 描述的是从页面中接收事件的顺序。  <img src="https://img-blog.csdnimg.cn/9ebccf7688b44895a2d8a3fc9f136fc1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATW9vbnlfd3k=,size_20,color_FFFFFF,t_70,g_se,x_16#id=Szjrb&amp;originHeight=395&amp;originWidth=584&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h3><ol><li>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</li><li><code>onclick</code> 和 <code>attachEvent</code> 只能得到冒泡阶段。</li><li><code>addEventListener(type, listener[, useCapture])</code> 第三个参数如果是 <code>true</code>，表示在事件捕<br>获阶段调用事件处理程序；如果是 <code>false</code>（不写默认就是 <code>false</code>），表示在事件冒泡阶段调用事件处理<br>程序。</li><li>实际开发中我们很少使用事件捕获，我们 <strong>更关注事件冒泡</strong>。</li><li><strong>有些事件是没有冒泡的</strong>，比如 <code>onblur</code>、<code>onfocus</code>、<code>onmouseenter</code>、<code>onmouseleave</code></li></ol><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">eventTarget</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这个event 就是事件对象，我们还喜欢的写成 e 或者evt</span></span></code></pre></div><ul><li>官方解释：<code>event</code> 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。</li><li>简单理解：事件发生后，跟 <strong>事件相关的一系列信息数据的集合</strong> 都放到这个对象里面，这个对象就是事件对象 <code>event</code>，它有很多属性和方法</li></ul><h3 id="事件对象的常见属性和方法" tabindex="-1">事件对象的常见属性和方法 <a class="header-anchor" href="#事件对象的常见属性和方法" aria-label="Permalink to &quot;事件对象的常见属性和方法&quot;">​</a></h3><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td><code>e.target</code></td><td>返回触发事件的对象（标准）</td></tr><tr><td><code>e.srcElement</code></td><td>返回触发事件的对象（非标准）</td></tr><tr><td><code>e.type</code></td><td>返回事件类型</td></tr><tr><td><code>e.preventDefault()</code></td><td>阻止默认事件（标准）</td></tr><tr><td><code>e.returnValue = true</code></td><td>阻止默认事件（非标准，IE678）</td></tr><tr><td><code>e.stopPropagation()</code></td><td>阻止冒泡（标准）</td></tr><tr><td><code>e.cancelBubble</code></td><td>阻止冒泡（非标准，IE678）</td></tr></tbody></table><h2 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h2><p>事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</p><h1 id="常用的鼠标事件" tabindex="-1">常用的鼠标事件 <a class="header-anchor" href="#常用的鼠标事件" aria-label="Permalink to &quot;常用的鼠标事件&quot;">​</a></h1><ol><li>禁止鼠标右键菜单<br><code>contextmenu</code> 主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单。</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">contextmenu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ol start="2"><li>禁止鼠标选中（<code>selectstart</code> 开始选中）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">selectstart</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="鼠标事件对象" tabindex="-1">鼠标事件对象 <a class="header-anchor" href="#鼠标事件对象" aria-label="Permalink to &quot;鼠标事件对象&quot;">​</a></h3><p><code>event</code> 对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象 <code>MouseEvent</code> 和键盘事件对象 <code>KeyboardEvent</code>。</p><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td><code>e.clientX</code></td><td>返回鼠标相对于浏览器窗口可视区的 <code>X</code><br> 坐标</td></tr><tr><td><code>e.clientY</code></td><td>返回鼠标相对于浏览器窗口可视区的 <code>Y</code><br> 坐标</td></tr><tr><td><code>e.pageX</code></td><td>返回鼠标相对于文档页面的 <code>X</code><br> 坐标IE9+支持</td></tr><tr><td><code>e.pageY</code></td><td>返回鼠标相对于文档页面的 <code>Y</code><br> 坐标IE9+支持</td></tr><tr><td><code>e.screenX</code></td><td>返回鼠标相对于电脑屏幕的 <code>X</code><br> 坐标</td></tr><tr><td><code>e.screenY</code></td><td>返回鼠标相对于电脑屏幕的 <code>Y</code><br> 坐标</td></tr></tbody></table><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h1><h1 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-label="Permalink to &quot;定时器&quot;">​</a></h1><h3 id="settimeout-定时器" tabindex="-1">setTimeout() 定时器 <a class="header-anchor" href="#settimeout-定时器" aria-label="Permalink to &quot;setTimeout() 定时器&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(调用函数 [</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 延迟的毫秒数])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="setinterval-定时器" tabindex="-1">setInterval() 定时器 <a class="header-anchor" href="#setinterval-定时器" aria-label="Permalink to &quot;setInterval() 定时器&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(回调函数 [</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 间隔的毫秒数])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><code>setInterval()</code> 方法重复调用一个函数，每隔这个时间，</p><h3 id="this-指向问题" tabindex="-1">this 指向问题 <a class="header-anchor" href="#this-指向问题" aria-label="Permalink to &quot;this 指向问题&quot;">​</a></h3><p><code>this</code> 的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定 <code>this</code> 到底指向谁，一般情况下的最终指向的是那个调用它的对象<br>现阶段，我们先了解一下几个 <code>this</code> 指向：</p><ol><li>全局作用域或者普通函数中 <code>this</code> 指向全局对象 <code>window</code>（注意定时器里面的 <code>this</code> 指向 <code>window</code>）</li><li>方法调用中谁调用 <code>this</code> 指向谁</li><li>构造函数中 <code>this</code> 指向构造函数的实例</li></ol><h4 id="同步任务" tabindex="-1">同步任务 <a class="header-anchor" href="#同步任务" aria-label="Permalink to &quot;同步任务&quot;">​</a></h4><p>同步任务都在主线程上执行，形成一个 <strong>执行栈</strong>。</p><h4 id="异步任务" tabindex="-1">异步任务 <a class="header-anchor" href="#异步任务" aria-label="Permalink to &quot;异步任务&quot;">​</a></h4><p>JS 的异步是通过回调函数实现的。<br>一般而言，异步任务有以下三种类型：</p><ol><li>普通事件，如 <code>click</code>、<code>resize</code> 等</li><li>资源加载，如 <code>load</code>、<code>error</code> 等</li><li>定时器，包括 <code>setInterval</code>、<code>setTimeout</code> 等异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</li></ol><h2 id="location-对象" tabindex="-1">location 对象 <a class="header-anchor" href="#location-对象" aria-label="Permalink to &quot;location 对象&quot;">​</a></h2><p><code>window</code> 对象给我们提供了一个 <code>location</code> 属性用于 <strong>获取或设置窗体的URL</strong></p><h3 id="url" tabindex="-1">URL <a class="header-anchor" href="#url" aria-label="Permalink to &quot;URL&quot;">​</a></h3><p>统一资源定位符（Uniform Resource Locator, URL）是互联网上标准资源的地址。互联网上的每个文件都有<br>一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。<br>URL 的一般语法格式为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">格式</span></span>
<span class="line"><span style="color:#A6ACCD;">protocol://host[:port]/path/[?query]#fragment</span></span>
<span class="line"><span style="color:#A6ACCD;">举例</span></span>
<span class="line"><span style="color:#A6ACCD;">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</span></span></code></pre></div><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td><code>protocol</code></td><td>通信协议（http、ftp）</td></tr><tr><td><code>host</code></td><td>主机（域名）</td></tr><tr><td><code>port</code></td><td>端口号（可选），省略时使用方案的默认端口，如http默认端口80</td></tr><tr><td><code>path</code></td><td>路径，由零或多个 <code>/</code><br> 隔开的字符串，一般表示主机上的一个目录或文件地址</td></tr><tr><td><code>query</code></td><td>参数，以键值对的形式，通过 <code>&amp;</code><br> 符号分隔开</td></tr><tr><td><code>fragment</code></td><td>片段，<code>#</code><br> 后面内容，常见于链接、锚点</td></tr></tbody></table><h2 id="navigator-对象" tabindex="-1">navigator 对象 <a class="header-anchor" href="#navigator-对象" aria-label="Permalink to &quot;navigator 对象&quot;">​</a></h2><p><code>navigator</code> 对象包含有关浏览器的信息</p><h2 id="history-对象" tabindex="-1">history 对象 <a class="header-anchor" href="#history-对象" aria-label="Permalink to &quot;history 对象&quot;">​</a></h2><p><code>window</code> 对象给我们提供了一个 <code>history</code> 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p>`,170),n=[t];function c(p,r,i,d,h,y){return e(),s("div",null,n)}const C=a(l,[["render",c]]);export{u as __pageData,C as default};
