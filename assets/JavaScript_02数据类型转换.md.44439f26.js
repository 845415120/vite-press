import{_ as e,o as t,c as a,U as o}from"./chunks/framework.2333ef68.js";const b=JSON.parse('{"title":"数据类型转换","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/02数据类型转换.md","filePath":"JavaScript/02数据类型转换.md"}'),d={name:"JavaScript/02数据类型转换.md"},r=o('<h1 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h1><h3 id="typeof-获取变量数据类型" tabindex="-1">typeof 获取变量数据类型 <a class="header-anchor" href="#typeof-获取变量数据类型" aria-label="Permalink to &quot;typeof 获取变量数据类型&quot;">​</a></h3><p><code>typeof variable</code> （<code>typeof(variable)</code>） 返回一个字符串，值为该变量的数据类型。</p><h3 id="_1-转换成字符串的三种方法" tabindex="-1">1.转换成字符串的三种方法 <a class="header-anchor" href="#_1-转换成字符串的三种方法" aria-label="Permalink to &quot;1.转换成字符串的三种方法&quot;">​</a></h3><p>一般用第三种方式，隐式转换。</p><ul><li><code>toString()</code> 方法</li><li><code>String()</code> 方法</li><li>加号 <code>+</code> 拼接字符串</li></ul><h3 id="_2-转换为数字型" tabindex="-1">2.转换为数字型 <a class="header-anchor" href="#_2-转换为数字型" aria-label="Permalink to &quot;2.转换为数字型&quot;">​</a></h3><p>parseInt(变量)  可以把 字符型的转换为数字型 得到是整数</p><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><code>parseInt(str)</code><br> 函数</td><td>string-&gt;整数型</td><td>parseInt(&#39;10&#39;)</td></tr><tr><td><code>parseFloat()</code><br> 函数</td><td>string-&gt;浮点型</td><td>parseFloat(&#39;3.14&#39;)</td></tr><tr><td><code>Number()</code><br> 强转换函数</td><td>string-&gt;数字型</td><td>Number(&#39;12&#39;)</td></tr><tr><td>JS 隐式转换</td><td>算术运算符隐式转换为数字型</td><td><code>&#39;12&#39;- 0</code><br> 或 <code>&#39;12&#39; - &#39;&#39;</code><br> 或 <code>&#39;12&#39;*1</code></td></tr></tbody></table><h3 id="_3-转换为布尔型" tabindex="-1">3.转换为布尔型 <a class="header-anchor" href="#_3-转换为布尔型" aria-label="Permalink to &quot;3.转换为布尔型&quot;">​</a></h3><p>使用 <code>Boolean()</code> 函数转换。</p><ul><li>转换值为 <code>false</code>：<code>&#39;&#39;</code>, <code>0</code>, <code>NaN</code>, <code>null</code>, <code>undefined</code>（5个）</li><li>其他的转换值均为 <code>true</code></li></ul><h3 id="显式类型转换" tabindex="-1">显式类型转换 <a class="header-anchor" href="#显式类型转换" aria-label="Permalink to &quot;显式类型转换&quot;">​</a></h3><ul><li>toString()</li><li>String()</li><li>Number()</li><li>parseInt(string)</li><li>parseFloat(string)</li><li>Boolean()</li></ul><h3 id="隐式类型转换" tabindex="-1">隐式类型转换 <a class="header-anchor" href="#隐式类型转换" aria-label="Permalink to &quot;隐式类型转换&quot;">​</a></h3><ul><li>isNaN ()</li><li>自增/自减运算符：<code>++</code>、<code>—-</code></li><li>正号/负号：<code>+a</code>、<code>-a</code></li><li>加号：<code>+</code></li><li>运算符：<code>-</code>、<code>*</code>、<code>/</code></li></ul>',16),c=[r];function i(l,n,s,h,_,p){return t(),a("div",null,c)}const f=e(d,[["render",i]]);export{b as __pageData,f as default};
