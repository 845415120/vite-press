import{_ as s,o as a,c as n,U as l}from"./chunks/framework.2333ef68.js";const h=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"面试之路/JavaScript.md","filePath":"面试之路/JavaScript.md"}'),o={name:"面试之路/JavaScript.md"},p=l(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h3 id="_1-javascript有哪些数据类型-它们的区别" tabindex="-1">1. JavaScript有哪些数据类型，它们的区别？ <a class="header-anchor" href="#_1-javascript有哪些数据类型-它们的区别" aria-label="Permalink to &quot;1. JavaScript有哪些数据类型，它们的区别？&quot;">​</a></h3><p>JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p><h3 id="_2-数据类型检测的方式有哪些" tabindex="-1">2. 数据类型检测的方式有哪些 <a class="header-anchor" href="#_2-数据类型检测的方式有哪些" aria-label="Permalink to &quot;2. 数据类型检测的方式有哪些&quot;">​</a></h3><p>（1）typeof</p><p>其中数组、对象、null都会被判断为object，其他判断都正确。</p><p>（2）instanceof</p><p>其内部运行机制是判断在其原型链中能否找到该类型的原型。只能正确判断引用数据类型</p><p>（3） constructor</p><p>有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数</p><p>（4）Object.prototype.toString.call()</p><h3 id="_3-判断数组的方式有哪些" tabindex="-1">3. 判断数组的方式有哪些 <a class="header-anchor" href="#_3-判断数组的方式有哪些" aria-label="Permalink to &quot;3. 判断数组的方式有哪些&quot;">​</a></h3><ul><li>通过Object.prototype.toString.call()做判断</li><li>通过原型链做判断</li><li>通过ES6的Array.isArray()做判断</li><li>通过instanceof做判断</li><li>通过Array.prototype.isPrototypeOf</li></ul><h3 id="_6-intanceof-操作符的实现原理及实现" tabindex="-1">6. intanceof 操作符的实现原理及实现 <a class="header-anchor" href="#_6-intanceof-操作符的实现原理及实现" aria-label="Permalink to &quot;6. intanceof 操作符的实现原理及实现&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function myInstanceof(left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 获取对象的原型</span></span>
<span class="line"><span style="color:#A6ACCD;">  let proto = Object.getPrototypeOf(</span><span style="color:#B2CCD6;">left</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 获取构造函数的 prototype 对象</span></span>
<span class="line"><span style="color:#A6ACCD;">  let prototype = </span><span style="color:#B2CCD6;">right</span><span style="color:#A6ACCD;">.prototype</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  // 判断构造函数的 prototype 对象是否在对象的原型链上</span></span>
<span class="line"><span style="color:#A6ACCD;">  while (true) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (!proto) return false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (proto === prototype) return true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型</span></span>
<span class="line"><span style="color:#A6ACCD;">    proto = Object.getPrototypeOf(proto)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="_3-new操作符的实现步骤如下" tabindex="-1">3.new操作符的实现步骤如下 <a class="header-anchor" href="#_3-new操作符的实现步骤如下" aria-label="Permalink to &quot;3.new操作符的实现步骤如下&quot;">​</a></h3><ol><li>创建一个对象</li><li>将构造函数的作用域赋给新对象（也就是设置原型将对象的__proto__属性指向构造函数的prototype属性）</li><li>让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ol><h3 id="_4-javascript有哪些内置对象" tabindex="-1">4. JavaScript有哪些内置对象 <a class="header-anchor" href="#_4-javascript有哪些内置对象" aria-label="Permalink to &quot;4. JavaScript有哪些内置对象&quot;">​</a></h3><h3 id="_5-数组方法" tabindex="-1">5.数组方法 <a class="header-anchor" href="#_5-数组方法" aria-label="Permalink to &quot;5.数组方法&quot;">​</a></h3><ul><li>push(...items) —— 向尾端添加元素，</li><li>pop() —— 从尾端提取一个元素</li><li>shift() —— 从首端提取一个元素，</li><li>unshift(...items) —— 向首端添加元素，</li><li>splice(pos, deleteCount, ...items) —— 从 pos 开始删除 deleteCount 个元素，并插入 items。</li><li>遍历元素：</li><li>forEach(func) —— 对每个元素都调用 func，不返回任何内容。</li><li>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</li></ul><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230707/image.3ggitdwwlry0.webp" alt="img"><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230707/image.3i888mvq5i20.webp" alt="img"></p><h2 id="_7-变量提升" tabindex="-1">7.变量提升 <a class="header-anchor" href="#_7-变量提升" aria-label="Permalink to &quot;7.变量提升&quot;">​</a></h2><p>无论在函数中何处位置声明的变量，好像都被提升到了函数的首部</p><h2 id="_8-常见的dom操作有哪些" tabindex="-1">8.常见的DOM操作有哪些 <a class="header-anchor" href="#_8-常见的dom操作有哪些" aria-label="Permalink to &quot;8.常见的DOM操作有哪些&quot;">​</a></h2><h4 id="_1-dom-节点的获取" tabindex="-1">1）DOM 节点的获取 <a class="header-anchor" href="#_1-dom-节点的获取" aria-label="Permalink to &quot;1）DOM 节点的获取&quot;">​</a></h4><h4 id="_2-dom-节点的创建" tabindex="-1">2）DOM 节点的创建 <a class="header-anchor" href="#_2-dom-节点的创建" aria-label="Permalink to &quot;2）DOM 节点的创建&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;</span><span style="color:#FFCB6B;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;</span><span style="color:#FFCB6B;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">DEMO&lt;/</span><span style="color:#FFCB6B;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/</span><span style="color:#FFCB6B;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;</span><span style="color:#FFCB6B;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;</span><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> id=&quot;container&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;</span><span style="color:#FFCB6B;">h1</span><span style="color:#A6ACCD;"> id=&quot;title&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">我是标题&lt;/</span><span style="color:#FFCB6B;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/</span><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/</span><span style="color:#FFCB6B;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/</span><span style="color:#FFCB6B;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">// 首先获取父节点</span></span>
<span class="line"><span style="color:#FFCB6B;">var</span><span style="color:#A6ACCD;"> container = document.getElementById(&#39;container&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">// 创建新节点</span></span>
<span class="line"><span style="color:#FFCB6B;">var</span><span style="color:#A6ACCD;"> targetSpan = document.createElement(&#39;span&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">// 设置 </span><span style="color:#FFCB6B;">span</span><span style="color:#A6ACCD;"> 节点的内容</span></span>
<span class="line"><span style="color:#A6ACCD;">targetSpan</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">innerHTML</span><span style="color:#A6ACCD;"> = &#39;hello world&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 把新创建的元素塞进父节点里去</span></span>
<span class="line"><span style="color:#A6ACCD;">container.appendChild(targetSpan)</span></span></code></pre></div><h4 id="_3-dom-节点的删除" tabindex="-1">3）DOM 节点的删除 <a class="header-anchor" href="#_3-dom-节点的删除" aria-label="Permalink to &quot;3）DOM 节点的删除&quot;">​</a></h4><p><strong>removeChild</strong></p><h4 id="_4-修改-dom-元素" tabindex="-1">4）修改 DOM 元素 <a class="header-anchor" href="#_4-修改-dom-元素" aria-label="Permalink to &quot;4）修改 DOM 元素&quot;">​</a></h4><p><strong>insertBefore</strong></p><h2 id="_9-for-in和for-of的区别" tabindex="-1">9.for...in和for...of的区别 <a class="header-anchor" href="#_9-for-in和for-of的区别" aria-label="Permalink to &quot;9.for...in和for...of的区别&quot;">​</a></h2><p>for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下</p><ul><li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li><li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li></ul><h2 id="_10-如何使用for-of遍历对象" tabindex="-1">10.如何使用for...of遍历对象 <a class="header-anchor" href="#_10-如何使用for-of遍历对象" aria-label="Permalink to &quot;10.如何使用for...of遍历对象&quot;">​</a></h2><p>for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。</p><h2 id="_11-let、const、var的区别" tabindex="-1">11. let、const、var的区别 <a class="header-anchor" href="#_11-let、const、var的区别" aria-label="Permalink to &quot;11. let、const、var的区别&quot;">​</a></h2><p><strong>（1）块级作用域：</strong> 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</p><ul><li>内层变量可能覆盖外层变量</li><li>用来计数的循环变量泄露为全局变量</li></ul><p><strong>（2）变量提升：</strong> var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p><h2 id="_12-const对象的属性可以修改吗" tabindex="-1">12. const对象的属性可以修改吗 <a class="header-anchor" href="#_12-const对象的属性可以修改吗" aria-label="Permalink to &quot;12. const对象的属性可以修改吗&quot;">​</a></h2><p>const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。</p><h2 id="_13-箭头函数的this指向哪里" tabindex="-1">13. 箭头函数的this指向哪⾥？ <a class="header-anchor" href="#_13-箭头函数的this指向哪里" aria-label="Permalink to &quot;13. 箭头函数的this指向哪⾥？&quot;">​</a></h2><p>箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。</p><h2 id="_14-扩展运算符的作用及使用场景" tabindex="-1">14. 扩展运算符的作用及使用场景 <a class="header-anchor" href="#_14-扩展运算符的作用及使用场景" aria-label="Permalink to &quot;14. 扩展运算符的作用及使用场景&quot;">​</a></h2><p><strong>（1）对象扩展运算符</strong></p><p>对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p><h2 id="_15-对对象与数组的解构的理解" tabindex="-1">15. 对对象与数组的解构的理解 <a class="header-anchor" href="#_15-对对象与数组的解构的理解" aria-label="Permalink to &quot;15. 对对象与数组的解构的理解&quot;">​</a></h2><p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。</p><p><strong>1）数组的解构</strong> 在解构数组时，以元素的位置为匹配条件来提取想要的数据的</p><p><strong>2）对象的解构</strong> 对象解构严格以属性名作为定位依据</p><h2 id="_16-模板语法" tabindex="-1">16.模板语法 \`\` <a class="header-anchor" href="#_16-模板语法" aria-label="Permalink to &quot;16.模板语法   \`\`&quot;">​</a></h2><p>允许用\${}的方式嵌入变量 拼接字符串</p><ul><li>在模板字符串中，空格、缩进、换行都会被保留</li><li>模板字符串完全支持“运算”式的表达式，可以在\${}里完成一些计算</li></ul><h2 id="_17-垃圾回收机制" tabindex="-1">17 垃圾回收机制 <a class="header-anchor" href="#_17-垃圾回收机制" aria-label="Permalink to &quot;17 垃圾回收机制&quot;">​</a></h2><p>听谓垃圾回收,核心思想就是如何判断内存是否已经不再使用了,如果是,就视为垃圾,释放掉</p><p>下面介绍两种常见的浏览器垃圾回收算法:</p><h3 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-label="Permalink to &quot;引用计数&quot;">​</a></h3><p>引用一次加1 没用-1 0删除</p><p>有问题 循环引用 导致内存泄露(访问不到,也不释放)</p><h3 id="标记计数" tabindex="-1">标记计数 <a class="header-anchor" href="#标记计数" aria-label="Permalink to &quot;标记计数&quot;">​</a></h3><p>从根部(全局)扫描能访问到不删除,访问不到删除</p><h2 id="_2-创建对象方法" tabindex="-1">2.创建对象方法 <a class="header-anchor" href="#_2-创建对象方法" aria-label="Permalink to &quot;2.创建对象方法&quot;">​</a></h2><h3 id="通过字面量方式创建对象" tabindex="-1">通过字面量方式创建对象 <a class="header-anchor" href="#通过字面量方式创建对象" aria-label="Permalink to &quot;通过字面量方式创建对象&quot;">​</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var userinfo = {</span></span>
<span class="line"><span style="color:#A6ACCD;">username : &#39;jiang&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">userage :24,</span></span>
<span class="line"><span style="color:#A6ACCD;">  getuserinfo : function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">   console.log(this.username + this.userage)</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">  userinfo.getuserinfo();</span></span></code></pre></div><h3 id="工厂模式创建对象" tabindex="-1">工厂模式创建对象 <a class="header-anchor" href="#工厂模式创建对象" aria-label="Permalink to &quot;工厂模式创建对象&quot;">​</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function createUser (username,userage){</span></span>
<span class="line"><span style="color:#A6ACCD;">  var o = Object()</span></span>
<span class="line"><span style="color:#A6ACCD;">  o.username = username</span></span>
<span class="line"><span style="color:#A6ACCD;">  o.userage = userage</span></span>
<span class="line"><span style="color:#A6ACCD;">  o.sayhi = function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    log()</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">  return o</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">var user1 = createUser(&quot;jiang&quot;,24)</span></span></code></pre></div><h3 id="通过构造函数创建对象" tabindex="-1">通过构造函数创建对象 <a class="header-anchor" href="#通过构造函数创建对象" aria-label="Permalink to &quot;通过构造函数创建对象&quot;">​</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function User (username,userage){</span></span>
<span class="line"><span style="color:#A6ACCD;">  this.username = username</span></span>
<span class="line"><span style="color:#A6ACCD;">  this.userage = userage</span></span>
<span class="line"><span style="color:#A6ACCD;">  this.sayhi = function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    log()</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">var user1 = new User(&quot;jing&quot;,24)</span></span></code></pre></div><h3 id="通过原型创建对象" tabindex="-1">通过原型创建对象 <a class="header-anchor" href="#通过原型创建对象" aria-label="Permalink to &quot;通过原型创建对象&quot;">​</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function Person (username,userage){</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="通过class类" tabindex="-1">通过class类 <a class="header-anchor" href="#通过class类" aria-label="Permalink to &quot;通过class类&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个名为Person的类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sayHi</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Hi, my name is </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">. I am </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> years old.</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个Person的实例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> john </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 调用实例的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">john</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayHi</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出：Hi, my name is John. I am 30 years old.</span></span></code></pre></div><h1 id="dom操作" tabindex="-1">Dom操作 <a class="header-anchor" href="#dom操作" aria-label="Permalink to &quot;Dom操作&quot;">​</a></h1><h1 id="创建" tabindex="-1">创建 <a class="header-anchor" href="#创建" aria-label="Permalink to &quot;创建&quot;">​</a></h1><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">form</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    用户名 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    密码 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    var form1 = document.getElementById(&#39;form&#39;) //得到dom节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    var newInput = document.createElement(&#39;input&#39;) //创建input标签 </span></span>
<span class="line"><span style="color:#A6ACCD;">    var newarr = document.createAttribute(&#39;type&#39;) // 创建属性</span></span>
<span class="line"><span style="color:#A6ACCD;">    newarr.value = &#39;password&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    newInput.setAttributeNode(newarr) // 将属性节点添加到元素节点上</span></span>
<span class="line"><span style="color:#A6ACCD;">    var newTextnode = document.createTextNode(&quot;将&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    form1.appendChild(newTextnode) //将创建的新节点添加到父节点下</span></span>
<span class="line"><span style="color:#A6ACCD;">    form1.appendChild(newInput) //将创建的新节点添加到父节点下</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>createAttribute 创建属性节点</p><p>.value= true 给属性设置值</p><p>setAttributeNode 添加属性到元素上</p><p>.appendChild(newTextnode) //将创建的新节点添加到父节点下</p><h2 id="删除remove" tabindex="-1">删除remove <a class="header-anchor" href="#删除remove" aria-label="Permalink to &quot;删除remove&quot;">​</a></h2><h2 id="修改节点-replacechild-新-旧" tabindex="-1">修改节点 replaceChild(新,旧) <a class="header-anchor" href="#修改节点-replacechild-新-旧" aria-label="Permalink to &quot;修改节点 replaceChild(新,旧)&quot;">​</a></h2><p>修改元素内容innerHTMl</p><h1 id="ajax" tabindex="-1">AJAX <a class="header-anchor" href="#ajax" aria-label="Permalink to &quot;AJAX&quot;">​</a></h1><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let xhr = new XMLHttpRequest();</span></span>
<span class="line"><span style="color:#A6ACCD;">// 创建 Http 请求</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr.open(&quot;GET&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> true);</span></span>
<span class="line"><span style="color:#A6ACCD;">// 设置状态监听函数</span></span>
<span class="line"><span style="color:#A6ACCD;">// 发送 Http 请求</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr.send(null);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//处理响应</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">onreadystatechange</span><span style="color:#A6ACCD;"> = function() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  if (this.readyState !== 4) return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 当请求成功时</span></span>
<span class="line"><span style="color:#A6ACCD;">  if (this.status === 200) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    handle(t his.response)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> else </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.error(this.statusText)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span></code></pre></div><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><p>跨域资源共享（CORS）是一种机制，它使用额外的 HTTP 头来告诉浏览器，这个发起跨域请求的网站有权利访问响应的资源。</p><h2 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h2><p>使用JSONP时，客户端通过定义一个回调函数的方式，让自己传递一个参数给服务器。服务器接收这个参数后，以该参数为数据，调用客户端提供的回调函数，并将数据数字化为字符串作为参数连同函数名一起返回给客户端。</p><p>由于JSONP的返回值是JS代码，而非JSON数据，所以该方式可以绕过浏览器的同源策略。</p><h2 id="ajax、axios、fetch的区别" tabindex="-1">ajax、axios、fetch的区别 <a class="header-anchor" href="#ajax、axios、fetch的区别" aria-label="Permalink to &quot;ajax、axios、fetch的区别&quot;">​</a></h2><p>（1）AJAX Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML）</p><p>（2）Fetch 没有使用XMLHttpRequest对象。</p><p>（3）Axios</p><p>Axios 是一种基于Promise封装的HTTP客户端，其特点如下：</p><ul><li>浏览器端发起XMLHttpRequests请求</li><li>node端发起http请求</li><li>支持Promise API</li><li>监听请求和返回</li></ul>`,96),e=[p];function t(r,c,i,y,D,C){return a(),n("div",null,e)}const F=s(o,[["render",t]]);export{h as __pageData,F as default};
