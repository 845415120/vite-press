import{_ as s,o as a,c as n,U as o}from"./chunks/framework.2333ef68.js";const i=JSON.parse('{"title":"原型对象","description":"","frontmatter":{},"headers":[],"relativePath":"面试之路/原型.md","filePath":"面试之路/原型.md"}'),l={name:"面试之路/原型.md"},p=o(`<h1 id="原型对象" tabindex="-1">原型对象 <a class="header-anchor" href="#原型对象" aria-label="Permalink to &quot;原型对象&quot;">​</a></h1><p>每个函数在创建时都被赋予一个prototype属性,它指向函数的原型对象</p><p>构造函数的prototype属性会指向它的原型对象,通过构造函数可以创建实例</p><h2 id="原型对象-构造函数-实例" tabindex="-1">原型对象,构造函数,实例 <a class="header-anchor" href="#原型对象-构造函数-实例" aria-label="Permalink to &quot;原型对象,构造函数,实例&quot;">​</a></h2><p>每一个函数在创建时都被赋予一个prototype属性,在默认情况下所有原型对象都会增加一个constructor属性,指向prototype属性所在的函数,即<strong>构造函数</strong></p><p>当我们通过new操作符调用构造函数创建一个实例时,实例具有一个<code>_ _proto_ _</code>属性指向构造函数的原型对象.</p><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>在JavaScript中几乎所有对象都有<code>__proto__</code>属性指向函数原型对象,</p><p>而函数的原型对象同样存在<code>__proto__</code>属性指向上一级原型对象,层层往上指,直到最上层某个原型对象为null</p><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230707/image.1l03s01gwu2o.webp" alt=""></p><h2 id="原型链继承" tabindex="-1">原型链继承 <a class="header-anchor" href="#原型链继承" aria-label="Permalink to &quot;原型链继承&quot;">​</a></h2><p>原型链继承的主要思想是：重写子类的prototype属性，将其指向父类的实例。</p><p>我们定义一个子类Cat，用于继承父类Animal，子类Cat的实现代码如下</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 子类Cat</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Cat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原型继承</span></span>
<span class="line"><span style="color:#FFCB6B;">Cat</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Animal</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 很关键的一句，将Cat的构造函数指向自身</span></span>
<span class="line"><span style="color:#FFCB6B;">Cat</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Cat</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//因为如果不将Cat原型对象的constructor属性指向自身的构造函数的话，那将会指向父类Animal的构造函数。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Cat.prototype.constructor === Animal; // true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//所以在设置了子类的prototype属性后，需要将其constructor属性指向Cat。</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> cat </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Cat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">加菲猫</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// Animal</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 加菲猫</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 加菲猫正在睡觉！</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">猫粮</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 加菲猫正在吃：猫粮</span></span></code></pre></div>`,14),t=[p];function e(c,r,y,D,A,F){return a(),n("div",null,t)}const _=s(l,[["render",e]]);export{i as __pageData,_ as default};
