import{_ as s,o as a,c as n,U as l}from"./chunks/framework.2333ef68.js";const A=JSON.parse('{"title":"浅拷贝","description":"","frontmatter":{},"headers":[],"relativePath":"面试之路/深浅拷贝.md","filePath":"面试之路/深浅拷贝.md"}'),o={name:"面试之路/深浅拷贝.md"},p=l(`<h1 id="浅拷贝" tabindex="-1">浅拷贝 <a class="header-anchor" href="#浅拷贝" aria-label="Permalink to &quot;浅拷贝&quot;">​</a></h1><p>拷贝基本数据类型时 直接拷贝基本数据类型的值 拷贝引用类型时,拷贝的是内存地址,就是拷贝后的内容与原始内容指向同一个内存地址</p><h3 id="常见的浅拷贝方法有以下几种" tabindex="-1">常见的浅拷贝方法有以下几种 <a class="header-anchor" href="#常见的浅拷贝方法有以下几种" aria-label="Permalink to &quot;常见的浅拷贝方法有以下几种&quot;">​</a></h3><ul><li>使用Object.assign()方法，将原始对象的属性浅拷贝到目标对象中。例如：</li></ul><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>使用扩展运算符（…）将对象浅拷贝到新对象中。例如：</li></ul><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">};</span></span></code></pre></div><ul><li>使用Array.prototype.slice()方法将数组浅拷贝到新数组中。例如：</li></ul><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">]]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newArr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h2><p>从内存中完整的拷贝一份,并且会在堆内存中开辟一个新的区域存放, 拷贝出来的新对象和原始对象互相独立,互不影响</p><h3 id="常见的深拷贝方法有以下几种" tabindex="-1">常见的深拷贝方法有以下几种 <a class="header-anchor" href="#常见的深拷贝方法有以下几种" aria-label="Permalink to &quot;常见的深拷贝方法有以下几种&quot;">​</a></h3><h4 id="使用json序列化与反序列化" tabindex="-1">使用JSON序列化与反序列化 <a class="header-anchor" href="#使用json序列化与反序列化" aria-label="Permalink to &quot;使用JSON序列化与反序列化&quot;">​</a></h4><p><strong>JSON.stringify() 将对象转化为字符串<br> JSON.parse() 将字符串转为对象</strong></p><h4 id="递归遍历对象-创建新的对象" tabindex="-1">递归遍历对象，创建新的对象 <a class="header-anchor" href="#递归遍历对象-创建新的对象" aria-label="Permalink to &quot;递归遍历对象，创建新的对象&quot;">​</a></h4>`,15),e=[p];function t(r,c,D,y,C,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
